#BlueJ class context
comment0.target=LogAnalyzer
comment0.text=\r\n\ Read\ web\ server\ data\ and\ analyse\ hourly\ access\ patterns.\r\n\ Updated\ to\ analyze\ daily\ and\ monthly\ patterns\r\n\ The\ LogEntry\ and\ LogfileCreator\ classes\ have\ also\ been\ modified\r\n\ \r\n\ @author\ Matthew\ Schilling\r\n\ @version\ 2017.11.13\r\n\ \r\n\ @author\ David\ J.\ Barnes\ and\ Michael\ K\u00F6lling.\r\n\ @version\ \ \ \ 2016.02.29\r\n
comment1.params=
comment1.target=LogAnalyzer()
comment1.text=\r\n\ Create\ an\ object\ to\ analyze\ all\ web\ accesses.\r\n
comment10.params=
comment10.target=int\ busiestMonth()
comment10.text=\r\n\ More\ of\ the\ same,\ just\ with\ the\ month\ array\ this\ time\r\n\ @return\ the\ index,\ between\ 1\ and\ 12,\ for\ each\ month\r\n
comment11.params=
comment11.target=int\ quietestHour()
comment11.text=\r\n\ Calculate\ the\ hour\ with\ the\ least\ traffic\ by\ inversing\ the\ logic\r\n\ check\ for\ the\ busiest\ methods\r\n\ @\ return\ the\ index\ of\ hour\ array\ \r\n
comment12.params=
comment12.target=int\ quietestDay()
comment12.text=\r\n\ Mimic\ the\ quietestHour\ method,\ searching\ the\ day\ array\r\n\ @return\ index\ of\ dayCounts\ with\ the\ lowest\ count,\ 1-28\r\n
comment13.params=
comment13.target=int\ quietestMonth()
comment13.text=\r\n\ Mimic\ the\ previous\ methods\ and\ search\ the\ month\ array\r\n\ @return\ index\ of\ monthCounts,\ 1-12\r\n
comment14.params=
comment14.target=int\ busiestTwoHour()
comment14.text=\r\n\ Determine\ which\ successive\ hours\ have\ the\ most\ traffic\r\n\ by\ looking\ at\ entries\ two\ at\ a\ time\ with\ a\ nested\ loop\r\n\ @return\ the\ index\ location\ of\ first\ hour\ in\ the\ pair\r\n
comment2.params=
comment2.target=void\ analyzeHourlyData()
comment2.text=\r\n\ Analyze\ the\ all\ of\ the\ access\ data\ from\ the\ log\ file.\r\n\ Add\ values\ to\ arrays\ that\ each\ contain\ the\ number\ of\ results\ for\ a\ timeframe.\r\n
comment3.params=
comment3.target=void\ printHourlyCounts()
comment3.text=\r\n\ Print\ the\ hourly\ counts.\r\n\ These\ should\ have\ been\ set\ with\ a\ prior\r\n\ call\ to\ analyzeHourlyData.\r\n
comment4.params=
comment4.target=void\ printData()
comment4.text=\r\n\ Print\ the\ lines\ of\ data\ read\ by\ the\ LogfileReader\r\n
comment5.params=
comment5.target=int\ numberOfAccesses()
comment5.text=\r\n\ Return\ the\ total\ count\ of\ entries\ in\ the\ log\ file\r\n\ @return\ a\ count\ of\ items\ in\ an\ array\r\n
comment6.params=selectMonth
comment6.target=int\ totalAccessesPerMonth(int)
comment6.text=\r\n\ Calculate\ the\ total\ entries\ for\ a\ given\ month\r\n\ @param\ a\ int\ between\ 1-12\ to\ represent\ the\ month\r\n\ @return\ the\ value\ in\ that\ array\ position,\ representing\ \r\n\ the\ number\ of\ accesses\ that\ month.\r\n
comment7.params=
comment7.target=int\ averageAccessesPerMonth()
comment7.text=\r\n\ Calculate\ the\ average\ visits\ the\ site\ gets\ a\ month\r\n\ by\ totaling\ the\ entries\ for\ each\ month,\ and\ averaging.\r\n\ @return\ the\ result\ of\ dividing\ the\ total\ by\ 12\r\n
comment8.params=
comment8.target=int\ busiestHour()
comment8.text=\r\n\ Look\ for\ the\ largest\ value\ in\ the\ array\ of\ hour\ entries\r\n\ store\ that\ value,\ and\ compare\ the\ next\ value,\ replacing\ \r\n\ if\ it\ is\ larger.\r\n\ @return\ the\ index\ value\ of\ the\ largest\ value,\ representing\r\n\ the\ hour,\ between\ 0\ for\ 12am,\ and\ 23\ for\ 11pm.\r\n
comment9.params=
comment9.target=int\ busiestDay()
comment9.text=\r\n\ Use\ the\ same\ logic\ as\ busiestHour,\ but\ searching\ the\ array\r\n\ of\ day\ entries\ instead\r\n\ @return\ the\ index\ position\ of\ the\ largest\ value,\ between\r\n\ 1\ and\ capped\ at\ 28\ for\ simplicity\r\n
numComments=15
